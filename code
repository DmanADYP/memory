function array_diff(a, b) {
 let difference = a.filter(x => !b.includes(x));
  return difference;
}

var Node = function (data, next = null){
		this.data = data;
    this.next = next;
}

var LinkedList = function(){
		this.head = null;
}

LinkedList.prototype.insertF = function(data){
			this.head = new Node(data, this.head);
      console.log(this.head);
}

var run = new LinkedList();
run.insertF(5);
run.insertF(6);

function bub(arr){

	var temp;
	for(i=0; i<arr.length; i++){
  		//debugger
  		for(ii=arr.length; ii>=0; ii--){
      		debugger
      		if(arr[ii]> arr[ii+1]){
          		temp = arr[ii];
              arr[ii] = arr[ii+1];
              arr[ii+1] = temp;
          }
      }
  }
  alert(arr);
  
}

bub([11, 1,0,2, 7,3])

function reverse(str){
	return str.split('').reduce((rev, char)=>{
  		return char+ rev;
  });
}

alert(reverse('abcdx'));


function cap(str){
	strTemp = '';
	str.split(' ').forEach((item)=>{
  
  strTemp = strTemp +item[0].toUpperCase()+item.slice(1)+ ' ';
  });
  
  return strTemp;
}

alert(cap('a short sentence'));

function pal(str){
		let rev =  str.split('').reduce((rev,char)=>{
    		return (char+rev);
    });
    
    if(rev === str){
    		alert(rev +' '+ str);
    }else{
    		alert(0);
    }
}

pal('abba');

function solution(T) {
    var Temp = []; 
    // write your code in JavaScript (Node.js 8.9.4)
    return uniqueItems = Array.from(new Set(T));
     for (i = 0; i < (T.length/2); i++) { 
  	    Temp.push(T[i]);
	}
  debugger
	return Temp;
}
solution([3, 4, 7, 7, 6, 6]);

function rev(intt){
//debugger
		let inttemp = intt.toString().split('');
		if(Math.sign(intt)== -1){
    	inttemp = 	inttemp.slice(1);
    }else{
    	inttemp.push('-');
    }
    
    return inttemp.reverse().join('');
}

alert(rev(-51))


function max(str){
	const strMap = {}
  let max = 0;
  let maxChar = '';
  strMap['Dic'] = [...new Set(str)];
  
  str.split('').forEach((item)=>{
  	if(strMap[item]){
			strMap[item]++;
      }else{
      		strMap[item] = 1;
      }
  })
  for(let char of str){
  	if(strMap[char]> max){
    	max = strMap[char];
      maxChar = char;
      
    }
  }
		debugger
}

max('adsafasaaa')

function v(str){
	const vowels = 'aeiou';
	let vowelMap = {};
  str.toLowerCase().split('').forEach((item)=>{
  		if(vowels.includes(item)){
      	if(vowelMap[item]){
        		vowelMap[item]++;
        }else{
        		vowelMap[item] =1;
        }
      }
  });
  debugger
}

v(' a dog barks')

function step(n){
	for(let row =0; row<=n; row++){
  	let str = '';
    for(let col=0; col<=n; col++){
    		if(row<col){
        	str += 'x';
        }else{
        		str +='#';
        }
    }
    debugger
      console.log(str);
  }

}

step(5);


function pyramid(n){

	for(let row=0; row<n; row++){
  	let str = '';
    const midpoint = Math.floor((2*n-1)/2)
  	for(let col = 0; col< 2 * n-1; col++){
    	if(midpoint-row<= col && midpoint + row>=col){
      	str += '#';
      }else{
      	str += 'x';
      }
    }
    debugger
    console.log(str)
  }
}

pyramid(5)
